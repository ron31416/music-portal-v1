do $$begin raise exception 'do not run this file'; end$$;


--drop table production.user_role;
create table production.user_role (
  user_role_number  int not null,
  user_role_name    text not null,
  inserted_datetime timestamptz not null default now(),
  updated_datetime  timestamptz not null default now(),
  constraint pk_user_role primary key (
    user_role_number
  ),
  constraint ui_user_role_user_role_name unique (
    user_role_name
  )
);

insert into production.user_role (user_role_number, user_role_name) values (1, 'Admin');
insert into production.user_role (user_role_number, user_role_name) values (2, 'Student');
insert into production.user_role (user_role_number, user_role_name) values (3, 'Guest');


--drop table production.site_user;
create table production.site_user (
  user_id           int generated always as identity,
  user_name         text not null,
  user_email        text not null,
  user_first_name   text not null,
  user_last_name    text not null,
  user_role_number  int  not null,
  inserted_datetime timestamptz not null default now(),
  updated_datetime  timestamptz not null default now(),
  constraint pk_site_user primary key (
    user_id
  ),
  constraint ui_site_user_user_name unique (
    user_name
  ),
  constraint ui_site_user_user_email unique (
    user_email
  ),
  constraint fk_user_role_level foreign key (
    user_role_number
  )
    references production.user_role (
      user_role_number
    ),
  constraint ck_user_name_lower check (
    user_name = lower(user_name)
  ),
  constraint ck_user_name_nonempty check (
    length(btrim(user_name)) > 0
  ),
  constraint ck_user_email_lower check (
    user_email = lower(user_email)
  ),
  constraint ck_user_email_nonempty check (
    length(btrim(user_email)) > 0
  ),
  constraint ck_user_email_format check (
    user_email ~ '^[a-z0-9._%+\-]+@[a-z0-9.\-]+\.[a-z]{2,}$'
  )
);

insert into production.site_user (user_name, user_email, user_first_name, user_last_name, user_role_number)
    values ('ron31416', 'ron31416@gmail.com', 'Ron', 'Rice', 1)


--drop table production.skill_level;
create table production.skill_level (
  skill_level_number  int         not null,
  skill_level_name    text        not null,
  inserted_datetime   timestamptz not null default now(),
  updated_datetime    timestamptz not null default now(),
  constraint pk_skill_level primary key (
    skill_level_number
  ),
  constraint ui_skill_level_name unique (
    skill_level_name
  )
);

insert into production.skill_level (skill_level_number, skill_level_name) values (1, 'Beginner');
insert into production.skill_level (skill_level_number, skill_level_name) values (2, 'Intermediate');
insert into production.skill_level (skill_level_number, skill_level_name) values (3, 'Advanced');


--drop table production.song
create table production.song (
  song_id             int         generated by default as identity,
  song_title          text        not null,
  composer_last_name  text        not null,
  composer_first_name text        not null,
  skill_level_number  int         not null,
  file_name           text        not null,
  song_mxl            bytea       not null,
  inserted_datetime   timestamptz not null default now(),
  updated_datetime    timestamptz not null default now(),
  constraint pk_song primary key (
    song_id
  ),
  constraint ui_song_composer_song_title_skill unique (
    composer_last_name,
    composer_first_name,
    song_title,
    skill_level_number
  ),
  constraint ui_song_file_name unique (
    file_name
  ),
  constraint fk_skill_level foreign key (
    skill_level_number
  )
    references production.skill_level (
      skill_level_number
    ),
  constraint ck_song_mxl check (
    substring(song_mxl from 1 for 4)
      IN (E'\\x504b0304'::bytea, E'\\x504b0506'::bytea, E'\\x504b0708'::bytea)
  )
);
